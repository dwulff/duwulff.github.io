#p_rnd = problemGenerator_eco(10000,2,2)
p_rnd = p_KPH_ext
#p_rnd   = problemGenerator(50000,2,2)
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk)
l.tk = c(0,0,0,0)
u.tk = c(1e+5,1e+5,1e+5,Inf)
noise = as.numeric(0)
#p_rnd = problemGenerator_cert(10000,2,2)
#p_rnd = problemGenerator_eco(10000,2,2)
p_rnd = p_KPH_ext
#p_rnd   = problemGenerator(50000,2,2)
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk)
nrow(p_KPH_ext)
noise = as.numeric(0)
#p_rnd = problemGenerator_cert(10000,2,2)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk)
noise = as.numeric(0)
#p_rnd = problemGenerator_cert(10000,2,2)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk)
noise = as.numeric(0)
#p_rnd = problemGenerator_cert(10000,2,2)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk)
noise = as.numeric(0)
#p_rnd = problemGenerator_cert(10000,2,2)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk)
noise = as.numeric(0)
#p_rnd = problemGenerator_cert(10000,2,2)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk)
noise = as.numeric(0)
#p_rnd = problemGenerator_cert(10000,2,2)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk)
noise = as.numeric(0)
#p_rnd = problemGenerator_cert(10000,2,2)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk)
noise = as.numeric(0)
#p_rnd = problemGenerator_cert(10000,2,2)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk)
noise = as.numeric(0)
#p_rnd = problemGenerator_cert(10000,2,2)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk)
noise = as.numeric(0)
#p_rnd = problemGenerator_cert(10000,2,2)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk)
d = c()
for(i in 1:100){
noise = as.numeric(0)
#p_rnd = problemGenerator_cert(10000,2,2)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
d = rbind(d,fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk))
}
apply(d,1,median)
apply(d,2,median)
d = c()
for(i in 1:300){
print(i)
noise = as.numeric(0)
#p_rnd = problemGenerator_cert(10000,2,2)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
d = rbind(d,fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk))
}
apply(d,2,median)
a = t(sapply(smp_rnd,function(x) c(mean(x[[1]]),mean(x[[2]]))))
mean(a[,1]>a[,2])
mean(a[,1]==a[,2])
as.numeric(a[,1]>a[,2]) ==  cho_rnd_NM
cho_rnd_NM
as.numeric(a[,1]<a[,2]) ==  cho_rnd_NM
as.numeric(a[,1]<a[,2]) ==  cho_rnd_NM
which(a[,1]==a[,2])
d = c()
for(i in 1:300){
print(i)
noise = as.numeric(0)
p_rnd = problemGenerator_cert(100,2,2)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
#p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
d = rbind(d,fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk))
}
apply(d,2,median)
p_rnd
rnf(100,0)
rnf(0,100)
rnf(0,100)
rnf(0,100)
rnf(-100,100)
rnf(-100,0)
rnf(-100,0)
rnf(100,0)
rnf(100,0)
sourceCpp(paste0(DIR,'NoiseAsUnderweighting/src/cppFuns.cpp'))
sourceCpp(paste0(DIR,'NoiseAsUnderweighting/src/CPTcpp.cpp'))
sourceCpp(paste0(DIR,'NoiseAsUnderweighting/src/CPTcpp.cpp'))
problemGenerator_cert(100,2,2)
problemGenerator_cert(100)
sourceCpp(paste0(DIR,'NoiseAsUnderweighting/src/CPTcpp.cpp'))
problemGenerator_cert(100)
sourceCpp(paste0(DIR,'NoiseAsUnderweighting/src/CPTcpp.cpp'))
sourceCpp(paste0(DIR,'NoiseAsUnderweighting/src/CPTcpp.cpp'))
problemGenerator_cert(100)
p_rnd = problemGenerator_cert(100)
mean(p_rnd[,1]*p_rnd[,3]+p_rnd[,1]*p_rnd[,3])
mean(p_rnd[,1]*p_rnd[,3]+p_rnd[,2]*p_rnd[,4])
p_rnd = problemGenerator_cert(1000)
mean(p_rnd[,1]*p_rnd[,3]+p_rnd[,2]*p_rnd[,4])
p_rnd = problemGenerator_cert(10000)
mean(p_rnd[,1]*p_rnd[,3]+p_rnd[,2]*p_rnd[,4])
d = c()
for(i in 1:300){
print(i)
noise = as.numeric(0)
p_rnd = problemGenerator_cert(100)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
#p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
d = rbind(d,fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk))
}
apply(d,2,median)
sourceCpp(paste0(DIR,'NoiseAsUnderweighting/src/CPTcpp.cpp'))
d = c()
for(i in 1:300){
print(i)
noise = as.numeric(0)
p_rnd = problemGenerator_cert(100)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
#p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_KPH_ext),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
d = rbind(d,fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk))
}
apply(d,2,median)
warnings()
problemGenerator_cert(100)
head(p_rnd)
head(smp_rnd)
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_rnd),replace=T))
smp_rnd
d = c()
for(i in 1:300){
print(i)
noise = as.numeric(0)
p_rnd = problemGenerator_cert(100)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
#p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_rnd),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
d = rbind(d,fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk))
}
apply(d,2,median)
l.tk = c(1,1,0,0)
u.tk = c(1,1,1e+5,Inf)
d = c()
for(i in 1:300){
print(i)
noise = as.numeric(0)
p_rnd = problemGenerator_cert(100)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
#p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_rnd),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
d = rbind(d,fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk))
}
apply(d,2,median)
l.tk = c(1,1,0,0)
u.tk = c(1,1,1e+5,Inf)
d = c()
for(i in 1:300){
print(i)
noise = as.numeric(0)
p_rnd = problemGenerator_cert(100)
#p_rnd = problemGenerator_eco(10000,2,2)
#p_rnd   = problemGenerator(50000,2,2)
#p_rnd = p_KPH
smp_rnd = sampl(as.matrix(p_rnd),sample(ss,nrow(p_rnd),replace=T))
sds_rnd = getSD(smp_rnd)
pro_rnd_o = transformProblems(as.matrix(p_rnd))
cho_rnd_NM = SUMpr_v(smp_rnd,sds_rnd,noise)
d = rbind(d,fit_fun(c(  1,   1,  1),cpt_lik_tk,pro_rnd_o,cho_rnd_NM,u.tk,l.tk))
}
apply(d,2,median)
2+2
200 * .1445
1981 / 10
install.packages('rsconnect')
require(rsconnect)
rsconnect::setAccountInfo(name='dirkwulff',
token='F93CBF8C012D2A3301C55AE437BB5109',
secret='<SECRET>')
rsconnect::setAccountInfo(name='dirkwulff',
token='F93CBF8C012D2A3301C55AE437BB5109',
secret='<SECRET>')
rsconnect::setAccountInfo(name='dirkwulff',
token='F93CBF8C012D2A3301C55AE437BB5109',
secret='itsme')
?shiny
?column
require(shiny)
?column
names = c('Dirk Wulff','Bugs Bunny','Donald Duck','Batman')
install.packages('animation')
require(animation)
?saveGIF
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp()
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
?renderUI
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
?uiOutput
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
strong
?strong
strong('hallo')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
class(strong('hallo'))
?shiny.tag
??shiny.tag
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
?tagList
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
as.character(tagList(tags$div(font = "100"),tags$br(),tags$p(names[pos[run]])))
pso=1
pos=1
as.character(tagList(tags$div(font = "100"),tags$br(),tags$p(names[pos[run]])))
run=1
as.character(tagList(tags$div(font = "100"),tags$br(),tags$p(names[pos[run]])))
?tagList
tag
?tag
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
?tags
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
col2hex
rgb(1,0,0)
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
tags$div(id = 'text',
align = "center",
tags$p(names[pos[run]], color="#FF0000")
)
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
tags$div(id = 'text',
align = "center",
tags$p(names[pos[run]], style="font-size:100")
)
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
?titlePanel
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/speakerSelect')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
?uiOutput
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
?renderPlot
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
?reactive
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
runApp('Dropbox (2.0)/Work/Software/test')
sqrt(.00001)
i = .00001
for(i in 1:10) sqrt(i)
i = .00001
for(i in 1:10){ i = sqrt(i); print(i)}
i = .00001
for(i in 1:10){ i = sqrt(i); print(i)}
i = .00001
for(j in 1:10){ i = sqrt(i); print(i)}
i = .00001
for(j in 1:10){ i = i**.88; print(i)}
i = .00001
for(j in 1:100){ i = i**.9; print(i)}
i = .000001
for(j in 1:100){ i = i**.9; print(i)}
i = .000001
for(j in 1:100){ i = i**.95; print(i)}
log(1:1000)
plot(log(1:1000))
plot(log(1:1000))
plot(log(1:1000)**.1)
plot(log(1:1000)**10)
plot(log(1:1000)**2)
(100:155)/100
nchar('Tehilla Mechera-Ostrovsky')
nchar(Mechera-Ostrovsky)
nchar('Mechera-Ostrovsky')
goodchoices = read.table('_Goodchoices/GoodchoicesSurveys.txt',header=F,sep='\n')[,1]
tab = paste0(goodchoices[1],' (Antworten)')
goodchoices = read.table('_Goodchoices/GoodchoicesSurveys.txt',header=F,sep='\n')[,1]
networks    = read.table('_Networks/NetworksSurveys.txt',header=F,sep='\n')[,1]
options(stringsAsFactors = F)
require(googlesheets)
require(devtools);install_github('dwulff/translatoR');require(translatoR)
setwd('~/Dropbox (2.0)/Work/Software/dwulff.github.io/')
## Intro survey
goodchoices = read.table('_Goodchoices/GoodchoicesSurveys.txt',header=F,sep='\n')[,1]
networks    = read.table('_Networks/NetworksSurveys.txt',header=F,sep='\n')[,1]
tab = paste0(networks[1],' (Antworten)')
tab = paste0(goodchoices[1],' (Antworten)')
gs = gs_title(tab)
d = gs_read(gs)
d = as.data.frame(d)
options(stringsAsFactors = F)
require(googlesheets)
setwd('~/Dropbox (2.0)/Work/Software/dwulff.github.io/')
goodchoices = read.table('_Goodchoices/GoodchoicesSurveys.txt',header=F,sep='\n')[,1]
networks    = read.table('_Networks/NetworksSurveys.txt',header=F,sep='\n')[,1]
tab = paste0(networks[1],' (Antworten)')
tab = paste0(goodchoices[1],' (Antworten)')
gs = gs_title(tab)
d = gs_read(gs)
d = as.data.frame(d)
# networks
names = d[,3]
comp = unlist(d[,4:10])
crit = unlist(d[,11:13])
for(com in comp) cat(com,'\n\n')
(5/6)**4
1-(5/6)**4
for(cri in crit) cat(cri,'\n\n')
